-- Copyright (c) 2015 FAT-GYFT, MIT License

procedure genWorlds (u : Universe)
var
  worlds : Sequence(World),
  aWorld : World,   --at t
  aWorld2 : World,  --at t-1

  nbCells : Integer,
  nbDronesMoving : Integer,

  sCell : Sequence(Cell),
  cells : Sequence(Cell),
  aCell : Cell,
  warehouseCell : Cell,
  baseCell : Cell,

  receptacles : Sequence(Receptacle),
  aReceptacle : Receptacle,
  bReceptacle : Receptacle,
  warehouse : Warehouse,

  aDrone : Drone,
  bDrone : Drone,
  drones : Sequence(Drone);

begin
  ---------------------
  -- Generating grid --
  ---------------------

  nbCells := [u.SIDE * u.SIDE];
  cells := CreateN(Cell, [nbCells]);

  for i:Integer in [Sequence{1..(nbCells)}]
  begin
    Insert(Cells, [u], [cells->at(i)]);

    -- Adding neighbors:
    --------------------
    --  [1 2 3
    --   4 5 6
    --   7 8 9]
    -- Like this but both ways:
    --  1: 2 4
    --  2: 3 5
    --  3: 6
    --  4: 5 7
    --  5: 6 8
    --  6: 9
    --  7: 8
    --  8: 9
    --  9: /

    if [i < nbCells] then
    begin
      -- i % u.SIDE <> 0
      if [i - u.SIDE * (i div u.SIDE) <> 0] then
      begin
        Insert(Neighbors, [cells->at(i)], [cells->at(i + 1)]);
        Insert(Neighbors, [cells->at(i + 1)], [cells->at(i)]);
      end;
      if [i + u.SIDE <= nbCells] then
      begin
        Insert(Neighbors, [cells->at(i)], [cells->at(i + u.SIDE)]);
        Insert(Neighbors, [cells->at(i + u.SIDE)], [cells->at(i)]);
      end;
    end;
  end;

  -----------------------
  -- Generating worlds --
  -----------------------

  worlds := CreateN(World, [u.TICN]);

  for i:Integer in [Sequence{1..u.TICN - 1}]
  begin
    Insert(NextWorld, [worlds->at(i)], [worlds->at(i + 1)]);
  end;

  ----------------------------------------
  -- Inserting into Worlds and Universe --
  ----------------------------------------

  warehouseCell := [cells->at(5)];
  
  for wi:Integer in [Sequence{1..u.TICN}]
  begin
    if [wi = 1] then
    begin
      receptacles := CreateN(Receptacle, [u.RNB]);
      for r:Receptacle in [receptacles]
      begin
        [r].nbProducts := Any([Sequence{0..u.RCAP}]);
      end;
      
      warehouse := Create(Warehouse);
      Insert(HasWarehouse, [warehouseCell], [warehouse]);
      Insert(HasReceptacle, [cells->at(1)], [receptacles->at(1)]);
      Insert(HasReceptacle, [cells->at(3)], [receptacles->at(2)]);
      Insert(HasReceptacle, [cells->at(7)], [receptacles->at(3)]);
      Insert(HasReceptacle, [cells->at(9)], [receptacles->at(4)]);
      
      
    end else begin
      receptacles := CreateN(Receptacle, [u.RNB]);
      aWorld2 := [worlds->at(wi-1)];
      
      for i:Integer in [Sequence{1..u.RNB}]
      begin
         aReceptacle := [receptacles->at(i)];
         bReceptacle := [aWorld2.receptacles->asSequence()->at(i)];
        [aReceptacle].nbProducts := [bReceptacle.nbProducts];
        aCell := [bReceptacle.position];
        Insert(HasReceptacle, [aCell], [receptacles->at(i)]);
      end;
      
      warehouse := Create(Warehouse);
      -- Il faut changer et mettre warehouse dans l'univers
      Insert(HasWarehouse, [aWorld2.warehouse.position], [warehouse]);
      
    end;

    -----------------------
    -- Generating drones --
    -----------------------
    drones := CreateN(Drone, [u.DNB]);
    for i:Integer in [Sequence{1..u.DNB}]
    begin
      [drones->at(i)].id := [i];
      [drones->at(i)].nbProducts := Any([Sequence{1..u.DCAP}]);
      [drones->at(i)].remainingBattery := [u.MAXB];
    end;

    if [wi > 1] then
    begin
      -- Adding a random number of them on the grid
      nbDronesMoving := Any([Sequence{1..u.DNB}]);
      for i:Integer in [Sequence{1..nbDronesMoving}]
      begin
      
        aWorld2 := [worlds->at(wi-1)];
     
        bDrone := [aWorld2.drones->asSequence()->at(i)];
        
        aDrone := [drones->at(i)];
        [aDrone].nbProducts := [bDrone.nbProducts];
        [aDrone].remainingBattery := [bDrone.remainingBattery];
        aReceptacle := Try([receptacles]);
        [aDrone].id := [bDrone.id];
        
        if [bDrone.charger.isDefined()] then 
        begin
          Insert(Charges, [aDrone], [bDrone.charger]);
          Delete(Charges, [bDrone], [bDrone.charger]);
        end;

        if[aDrone.charger.isDefined() and aDrone.remainingBattery<3] then 
        begin
          [aDrone].remainingBattery :=[aDrone.remainingBattery+1];
          if[aDrone.remainingBattery=3] then 
          begin
            Delete(Charges, [aDrone], [aDrone.charger]);
          end;
        end else begin
          
          if [aDrone.position.neighbors->isDefined()] then
          begin
            baseCell := [aDrone.position];
          end else begin
             baseCell := [warehouseCell];
          end;

          aCell := [baseCell];
          for c:Cell in [baseCell.neighbors->asSequence()]
          begin
            if [c.drone.isUndefined() and c<>warehouseCell] then
            begin
              aCell := [c];
              if [aDrone.deliveringReceptacle.isUndefined()] then
              begin
                Insert(ReceptaclePosition, [aDrone], [aReceptacle]);
              end;
             
            end;
          end;
          
          if [not aCell.receptacle->isEmpty()] then
          begin
            bReceptacle := Any([aCell.receptacle->asSequence()]);
            Insert(Charges, [aDrone], [bReceptacle]);-------------------Rentre pas
          end;
          
          if [aDrone.position <> aCell] then
          begin
            [aDrone].remainingBattery :=[aDrone.remainingBattery-1];
          end;
          if [bDrone.position.isDefined()] then
          begin
            Delete(Position, [bDrone], [bDrone.position]);
          end;
          Insert(Position, [aDrone], [aCell]);
          
        end;  
      end;
    end;  -- end if wi > 1

    ---------------
    -- Insertion --
    ---------------
    
    Insert(Worlds, [u], [worlds->at(wi)]);

    Insert(WorldWarehouse, [worlds->at(wi)], [warehouse]);

    for i:Integer in [Sequence{1..u.RNB}]
    begin
      Insert(WorldReceptacles, [worlds->at(wi)], [receptacles->at(i)]);
    end;

    for i:Integer in [Sequence{1..u.DNB}]
    begin
      Insert(WorldDrones, [worlds->at(wi)], [drones->at(i)]);
    end;
  end;  -- end for all worlds
end;  -- end procedure


