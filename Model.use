-- Copyright (c) 2015 FAT-GYFT, MIT License

model DroneModel

class World
  attributes
    RCAP : Integer -- Product capacity of a receptacle
    DCAP : Integer -- Product capacity of a drone
    DNB  : Integer -- Drone number
    RNB  : Integer -- Receptacle number
    MAXB : Integer -- Max battery for a drone
    SIDE : Integer -- Side of the square grid
    PTIC : Integer -- Number of ticks before a product is consumed
end

class Cell
end

class Warehouse < Cell
end

class Receptacle < Cell
  attributes
    nbProducts : Integer
end

class Drone
  attributes
    remainingBattery : Integer
    nbProducts : Integer
	receptacle : Receptacle
	position : Cell
end

class Time
  attributes
    timeReference : Integer
--  operations
--    TicTac(w : World)
--	  pre worldDefined: w.isDefined()
--	  post: self := [self.succ]
end

associationclass Order
  between
    Drone      [*] role deliverDrone
    Receptacle [0..1] role destination
  attributes
    nbToDeliver : Integer
end

association Position between
  Drone [0..1] role drone
  Cell  [0..1] role cell
end

association Charges between
  Drone      [0..1] role charging
  Receptacle [0..1] role charger
end

association Neighbors between
  Cell [2..4] role origin
  Cell [2..4] role neighbors
end

association Next between
  Time [0..1] role previous
  Time [0..1] role next
end

association Drones between
  Time  [1] role time
  Drone [*] role allDrones
end

association Cells between
  Time [1] role time
  Cell [*] role allCells
end

association Times between
  World [1] role world
  Time  [1] role head
end

--drone X
--orthogonal grid X
--energy X
--time X
--warehouse X
--receptacle X
--order X
--product (nb, class) X

constraints -- The invariants

context World inv Single_World:
  World.allInstances->size = 1

--Rule 1
context w:World inv DNB_drones:
  Drone.allInstances->size = w.DNB

--context w:World inv RNB_receptacles:
--  Receptacle.allInstances->size = w.RNB

--Rule 2

context w:World inv Max_RCAP:
  Receptacle.allInstances->forAll(r | r.nbProducts <= w.RCAP)

--Rule 3: one Receptacle per Order (in UML)

--Rule 6
context w:World inv Max_DCAP:
  Drone.allInstances->forAll(d | d.nbProducts <= w.DCAP and w.DCAP>0)

--Rule 11: one Drone per Cell (in UML)

--Rule 15
context w:World inv MAXB_drones:
  Drone.allInstances->forAll(d| d.remainingBattery<=w.MAXB)

--TicTac pdf page 27/28
--context Time::ticTac(w : World)
--  pre initPre : w.isDefined()


--context ce:Cell inv Cell_Neighbors:
--  ce->















-- a drone leaves the warehouse directly to one of its neighbor
-- two drones can cross (if their destination is different)
-- an order only has one destination receptacle
-- a drone only leaves the warehouse if:
--     nbToDeliver + nbDelivering + qtyInReceptacle <= RCAP
--     and tests this hypothesis for every tick
-- a drone must be able to move (max 3 drone neighbors)
-- a drone has max DCAP products
-- a receptacle has max RCAP products
-- only one drone per cell
-- only one drone per receptacle




-- entering the warehouse is done just like any Cell
-- but after one tick, the drone has no position anymore (in the warehouse)
-- every PTIC ticks, all receptacles loose product
