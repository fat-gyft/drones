-- Copyright (c) 2015 FAT-GYFT, MIT License

model DroneModel

class Const
  attributes
    RCAP : Integer -- Product capacity of a receptacle
    DCAP : Integer -- Product capacity of a drone
    DNB  : Integer -- Drone number
    RNB  : Integer -- Receptacle number
    MAXB : Integer -- Max battery for a drone
    SIDE : Integer -- Side of the square grid
    PTIC : Integer -- Number of ticks before a product is consumed
end

class Cell
-- Add an operation to calculate all neighbors (both-ways)
end

class Warehouse < Cell
end

class Receptacle < Cell
  attributes
    nbProducts : Integer
end

class Drone
  attributes
    remainingBattery : Integer
    nbProducts : Integer
	receptacle : Receptacle
	position : Cell
  operations
    init()
	post prod_init:
	   self.nbProducts = 3
end

class World
  attributes
    drones : Sequence(Drone)
	cells: Sequence(Cell)
end

class Time
  attributes
    timeReference : Integer
  operations
    ticTac(world : World)
end

association Position between
  Drone[0..1] role drone
  Cell [0..1] role cell
end

--associationclass Order
-- between
--    Drone [0..1] role deliverDrone
--    Receptacle [0..1] role destination
--  attributes
--    nbToDeliver : Integer
--end

association Neighbors between
  Cell [*] role origin
  Cell [*] role neighbors
end

--drone X
--orthogonal grid
--energy X
--time
--warehouse X
--receptacle X
--command X
--product (nb, class) X


constraints -- The invariants

context Const inv Single_Const:
  Const.allInstances->size = 1

--Rule 1
context c:Const inv DNB_drones:
  Drone.allInstances->size = c.DNB
  
context c:Const inv RNB_receptacles:
  Receptacle.allInstances->size = c.RNB

--Rule 2
--context c:Const inv Max_RCAP:
--  Receptacle.allInstances->forAll(r | r.nbProducts <= c.RCAP and c.RCAP>0)
  
--Rule 6
--context c:Const inv Max_DCAP:
--  Drone.allInstances->forAll(d | d.nbProducts <= c.DCAP and c.DCAP>0)
 
--Rule 11
--context c:Const inv oneDronePerCell:
--  c.DNB-

--TicTac pdf page 27/28
--context Time::ticTac(w : World)
--  pre initPre : w.isDefined()

	
--context ce:Cell inv Cell_Neighbors:
--  ce->















-- a drone leaves the warehouse directly to one of its neighbor
-- two drones can cross (if their destination is different)
-- an order only has one destination receptacle
-- a drone only leaves the warehouse if:
--     nbToDeliver + nbDelivering + qtyInReceptacle <= RCAP
--     and tests this hypothesis for every tick
-- a drone must be able to move (max 3 drone neighbors)
-- a drone has max DCAP products
-- a receptacle has max RCAP products
-- only one drone per cell
-- only one drone per receptacle




-- entering the warehouse is done just like any Cell
-- but after one tick, the drone has no position anymore (in the warehouse)
-- every PTIC ticks, all receptacles loose product
